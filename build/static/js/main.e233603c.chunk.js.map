{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["library","add","fab","faUser","faCoffee","faPaperPlane","faSignOutAlt","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","SignIn","className","onClick","provider","GoogleAuthProvider","signInWithPopup","icon","SignOut","currentUser","signOut","ChatRoom","dummy","useRef","messagesRef","collection","query","orderBy","limit","useCollectionData","idField","messages","useState","formValue","setFormValue","sendMessage","e","a","preventDefault","uid","photoURL","text","createdAt","FieldValue","serverTimestamp","current","scrollIntoView","behavior","map","msg","ChatMessage","key","id","message","ref","onSubmit","value","onChange","target","placeholder","type","disabled","props","messageClass","src","App","useAuthState","user","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"2UAkBAA,IAAQC,IAAIC,IAAKC,IAAQC,IAAUC,IAAcC,KAEjDC,IAASC,cAAc,CACrBC,OAAQ,0CACRC,WAAY,gCACZC,YAAa,uCACbC,UAAW,gBACXC,cAAe,4BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGjB,IAAMC,EAAOV,IAASU,OAChBC,EAAYX,IAASW,YAuB3B,SAASC,IAOP,OACE,oCACE,4BAAQC,UAAU,UAAUC,QAPP,WACvB,IAAMC,EAAW,IAAIf,IAASU,KAAKM,mBACnCN,EAAKO,gBAAgBF,KAKoC,kBAAC,IAAD,CAAiBG,KAAM,CAAC,MAAO,YAAtF,yBAMN,SAASC,IACP,OAAOT,EAAKU,aACV,4BAAQP,UAAU,WAAWC,QAAS,kBAAMJ,EAAKW,YAAW,kBAAC,IAAD,CAAiBH,KAAK,kBAKtF,SAASI,IACP,IAAMC,EAAQC,mBACRC,EAAcd,EAAUe,WAAW,YACnCC,EAAQF,EAAYG,QAAQ,aAAaC,MAAM,IAHnC,EAKCC,YAAkBH,EAAO,CAAEI,QAAS,OAAhDC,EALW,sBAOgBC,mBAAS,IAPzB,mBAOXC,EAPW,KAOAC,EAPA,KAUZC,EAAW,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DAClBD,EAAEE,iBADgB,EAGQ7B,EAAKU,YAAvBoB,EAHU,EAGVA,IAAKC,EAHK,EAGLA,SAHK,SAKZhB,EAAY/B,IAAI,CACpBgD,KAAMR,EACNS,UAAW3C,IAASW,UAAUiC,WAAWC,kBACzCL,MACAC,aATgB,OAYlBN,EAAa,IACbZ,EAAMuB,QAAQC,eAAe,CAAEC,SAAU,WAbvB,2CAAH,sDAgBjB,OAAQ,oCACN,8BAEGhB,GAAYA,EAASiB,KAAI,SAAAC,GAAG,OAAI,kBAACC,EAAD,CAAaC,IAAKF,EAAIG,GAAIC,QAASJ,OAEpE,0BAAMK,IAAKhC,KAIb,0BAAMiC,SAAUpB,GAEd,2BAAOqB,MAAOvB,EAAWwB,SAAU,SAACrB,GAAD,OAAOF,EAAaE,EAAEsB,OAAOF,QAAQG,YAAY,YAEpF,4BAAQ/C,UAAU,WAAWgD,KAAK,SAASC,UAAW5B,GAAW,kBAAC,IAAD,CAAiBhB,KAAK,mBAO7F,SAASiC,EAAYY,GAAQ,IAAD,EACMA,EAAMT,QAA9BZ,EADkB,EAClBA,KAAMF,EADY,EACZA,IAAKC,EADO,EACPA,SAEbuB,EAAexB,IAAQ9B,EAAKU,YAAYoB,IAAM,OAAS,WAE7D,OAAQ,oCACN,yBAAK3B,UAAS,kBAAamD,IACzB,yBAAKC,IAAKxB,GAAY,0DACtB,2BAAIC,KAMKwB,MArGf,WAAgB,IAAD,EAEEC,YAAazD,GAArB0D,EAFM,oBAIb,OACE,yBAAKvD,UAAU,OACb,gCACE,qDACA,kBAACM,EAAD,OAGF,iCACGiD,EAAO,kBAAC9C,EAAD,MAAe,kBAACV,EAAD,SCpCXyD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMhC,c","file":"static/js/main.e233603c.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react';\n// import './App.css';\nimport './final.css'\n\n//Firebase\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport 'firebase/analytics';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\n//FontAwesome\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fab } from \"@fortawesome/free-brands-svg-icons\";\nimport { faUser, faCoffee, faPaperPlane, faSignOutAlt} from '@fortawesome/free-solid-svg-icons';\nlibrary.add(fab, faUser, faCoffee, faPaperPlane, faSignOutAlt);\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyA-zwGYIfiWLBu5gjQ1ZZq9Iv17A3XEFTg\",\n  authDomain: \"webchat-f8df8.firebaseapp.com\",\n  databaseURL: \"https://webchat-f8df8.firebaseio.com\",\n  projectId: \"webchat-f8df8\",\n  storageBucket: \"webchat-f8df8.appspot.com\",\n  messagingSenderId: \"519649131888\",\n  appId: \"1:519649131888:web:40a26e2582f578a0c4a3b5\",\n  measurementId: \"G-7LWYNXZC1E\"\n})\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n// const analytics = firebase.analytics();\n\n\nfunction App() {\n\n  const [user] = useAuthState(auth);\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>ReactJS Learning Chat</h1>\n        <SignOut />\n      </header>\n\n      <section>\n        {user ? <ChatRoom /> : <SignIn />}\n      </section>\n\n    </div>\n  );\n}\n\nfunction SignIn() {\n\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  }\n\n  return (\n    <>\n      <button className=\"sign-in\" onClick={signInWithGoogle}><FontAwesomeIcon icon={['fab', 'google']} /> Sign in with Google</button>\n    </>\n  )\n\n}\n\nfunction SignOut() {\n  return auth.currentUser && (\n    <button className=\"sign-out\" onClick={() => auth.signOut()}><FontAwesomeIcon icon=\"sign-out-alt\" /></button>\n  )\n}\n\n\nfunction ChatRoom() {\n  const dummy = useRef();\n  const messagesRef = firestore.collection('messages');\n  const query = messagesRef.orderBy('createdAt').limit(25);\n\n  const [messages] = useCollectionData(query, { idField: 'id' });\n\n  const [formValue, setFormValue] = useState('');\n\n\n  const sendMessage = async (e) => {\n    e.preventDefault();\n\n    const { uid, photoURL } = auth.currentUser;\n\n    await messagesRef.add({\n      text: formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL\n    })\n\n    setFormValue('');\n    dummy.current.scrollIntoView({ behavior: 'smooth' });\n  }\n\n  return (<>\n    <main>\n\n      {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\n\n      <span ref={dummy}></span>\n\n    </main>\n\n    <form onSubmit={sendMessage}>\n\n      <input value={formValue} onChange={(e) => setFormValue(e.target.value)} placeholder=\"Message\" />\n\n      <button className=\"form-btn\" type=\"submit\" disabled={!formValue}><FontAwesomeIcon icon=\"paper-plane\" /></button>\n\n    </form>\n  </>)\n}\n\n\nfunction ChatMessage(props) {\n  const { text, uid, photoURL } = props.message;\n\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n\n  return (<>\n    <div className={`message ${messageClass}`}>\n      <img src={photoURL || 'https://api.adorable.io/avatars/23/abott@adorable.png'} />\n      <p>{text}</p>\n    </div>\n  </>)\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}